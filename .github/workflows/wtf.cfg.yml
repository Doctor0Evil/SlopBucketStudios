name: WTF Config – Locate get_pending_workflows.py

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  locate-script:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Search for get_pending_workflows.py
        id: search
        shell: bash
        run: |
          echo "🔍 Searching for get_pending_workflows.py..."
          SCRIPT_PATH=$(find . -type f -iname "get_pending_workflows.py" | head -n 1 || true)
          if [ -n "$SCRIPT_PATH" ]; then
            echo "✅ Found at: $SCRIPT_PATH"
            echo "script_path=$SCRIPT_PATH" >> "$GITHUB_OUTPUT"
          else
            echo "::warning::get_pending_workflows.py not found — continuing without it"
            echo "script_path=" >> "$GITHUB_OUTPUT"
          fi

      - name: Use script if present
        if: steps.search.outputs.script_path != ''
        run: |
          echo "Running ${{ steps.search.outputs.script_path }}..."
          python "${{ steps.search.outputs.script_path }}"

      - name: Log missing script
        if: steps.search.outputs.script_path == ''
        run: |
          mkdir -p .bithub/reports
          echo "{\"event\":\"missing_script\",\"script\":\"get_pending_workflows.py\",\"timestamp\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}" \
            > .bithub/reports/missing_get_pending_workflows.json
          echo "Logged missing script event to .bithub/reports/"

                      - name: Cache
  uses: actions/cache@v4.2.4
  with:
    # A list of files, directories, and wildcard patterns to cache and restore
    path: 
    # An explicit key for restoring and saving the cache
    key: 
    # An ordered multiline string listing the prefix-matched keys, that are used for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.
    restore-keys: # optional
    # The chunk size used to split up large files during upload, in bytes
    upload-chunk-size: # optional
    # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
    enableCrossOsArchive: # optional, default is false
    # Fail the workflow if cache entry is not found
    fail-on-cache-miss: # optional, default is false
    # Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache
    lookup-only: # optional, default is false
    # Run the post step to save the cache even if another step before fails
    save-always: # optional, default is false
          
