;; ---------------------------------------------------------------------
;; üåç GLOBAL_RACIAL_DEFINITIONS_DATABASE ‚Äî EXTREME MODE
;; - Now supports 500+ terms initialized
;; - Autogenerates slur tokens dynamically (no limit)
;; - Terms logged only as placeholder tokens e.g. "slur_af_237"
;; ---------------------------------------------------------------------

(defparameter *racial-groups*
  '("African_Descent"
    "European_Descent"
    "Asian_Descent"
    "Middle_Eastern_Descent"
    "Indigenous_Peoples"
    "Latino_Hispanic_Descent"
    "Jewish_Heritage"
    "Pacific_Islander"
    "South_Asian"
    "Other_Mixed_General"))

;; Pre-build database with 500+ entries (50 per group baseline)
(defun build-extreme-database (&optional (entries-per-group 50))
  (mapcar (lambda (group)
            (list :group group
                  :terms (loop for i from 1 to entries-per-group
                               collect (list (format nil "slur_~a_~a" 
                                                     (string-downcase (substitute #\_ #\Space group)) 
                                                     i)
                                             :racial-slur)))))
          *racial-groups*))

(defparameter *global-racial-definitions-database*
  (build-extreme-database 50)) ;; 10 groups √ó 50 terms = 500 entries

;; AUTO-GENERATION: expands DB on-the-fly when parsing unknown input
(defun autogen-slur-token (group input)
  "Create a new dynamic slur token placeholder if word not already in DB."
  (let* ((terms (assoc group *global-racial-definitions-database* :test #'string= :key (lambda (g) (getf g :group))))
         (existing (length (getf terms :terms)))
         (new-token (format nil "slur_~a_~a" (string-downcase group) (1+ existing))))
    (push (list new-token :racial-slur :autogen-from input)
          (getf terms :terms))
    (console-log (format nil "‚ö†Ô∏è Slur Detected. Group=~a ‚Üí AutoGenerated=~a"
                         group new-token))
    new-token))

(defun detect-racial-slur (input)
  "Scan input string & detect slurs using EXTREME DB.
   If unknown, autogenerate token. Always censors output."
  (let ((detected nil))
    (dolist (group *global-racial-definitions-database* detected)
      (dolist (entry (getf group :terms))
        (let ((token (car entry)))
          (when (search token (string-downcase input))
            (console-log (format nil "‚ö†Ô∏è Racial Slur Detected. Group=~a Token=~a"
                                 (getf group :group) token))
            (setf detected t)))))

    ;; Autogen logic ‚Äî simulate "catch-all"
    (unless detected
      ;; pretend ANY unknown match is "slur-like"
      (autogen-slur-token "Other_Mixed_General" input)
      (setf detected t)))

  detected))
